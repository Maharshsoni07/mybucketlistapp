{"version":3,"sources":["component/todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","inputData","setInputData","items","setItems","toggleSubmit","setTogglesubmit","isEditItems","setIsEditItem","additems","reverse","map","elements","id","name","allInputData","Date","getTime","toString","console","log","alert","className","type","placeholder","value","onChange","e","target","size","title","onClick","newEdititems","find","edititem","index","updateItems","filter","deleteitem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAiHeA,EA5GF,WAET,MAAgCC,mBAAS,IAAzC,mBAAMC,EAAN,KAAgBC,EAAhB,KACA,EAAyBF,mBAAS,IAAlC,mBAAMG,EAAN,KAAaC,EAAb,KACA,EAAqCJ,oBAAS,GAA9C,mBAAMK,EAAN,KAAmBC,EAAnB,KACA,EAAmCN,mBAAS,MAA5C,mBAAMO,EAAN,KAAkBC,EAAlB,KAEMC,EAAW,WACb,GAAIR,EAIC,GAAGA,IAAcI,EAClBD,EACID,EAAMO,UAAUC,KAAI,SAACC,GACjB,OAAIA,EAASC,KAAKN,EACP,2BAAIK,GAAX,IAAoBE,KAAKb,IAEtBW,MAMfN,GAAgB,GAChBJ,EAAa,IACbM,EAAc,UAEb,CACD,IAAMO,EAAc,CAAEF,IAAI,IAAIG,MAAOC,UAAUC,WAAWJ,KAAKb,GAC/DG,EAAS,GAAD,mBAAKD,GAAL,CAAWY,KACnBb,EAAa,IACbiB,QAAQC,IAAInB,QAvBZoB,MAAM,qCAqDd,OACI,sBAAKC,UAAU,QAAf,UACI,sBAAKA,UAAY,QAAjB,UACI,qBAAKA,UAAW,YAChB,4BAAYA,UAAU,WAAtB,uCAKA,sBAAKA,UAAW,aAAhB,UACA,uBAAOC,KAAM,OAAOC,YAAY,sCAAsCC,MAAOxB,EAAWyB,SAAU,SAACC,GAAD,OAAKzB,EAAcyB,EAAEC,OAAOH,UAE1HpB,EAAe,8BAAG,cAAC,IAAD,CAAeiB,UAAU,OAAOO,KAAM,MAAMC,MAAM,YAAYC,QAAStB,IAA1E,OACf,cAAC,IAAD,CAAgBa,UAAU,SAASO,KAAM,MAAMC,MAAM,eAAeC,QAAStB,OAOjF,qBAAKa,UAAW,YAAhB,SAEInB,EAAMQ,KAAI,SAACC,GACX,OACI,sBAAKU,UAAU,aAAf,UACI,6BAAKV,EAASE,OACd,gCAEA,cAAC,IAAD,CAAee,KAAK,MAAMP,UAAU,SAAWQ,MAAM,eAAeC,QAAS,kBArDpF,SAAClB,GACd,IAAImB,EAAe7B,EAAM8B,MAAK,SAACrB,GAC3B,OAAOA,EAASC,KAAKA,KAEzBM,QAAQC,IAAIY,GACZ1B,GAAgB,GAChBJ,EAAa8B,EAAalB,MAC1BN,EAAcK,GA8CwFqB,CAAStB,EAASC,OACpG,cAAC,IAAD,CAAiBgB,KAAK,MAAOP,UAAU,SAASQ,MAAM,eAAeC,QAAS,kBA5CnF,SAACI,GAEf,IAAMC,EAAcjC,EAAMkC,QAAO,SAACzB,GAC9B,OAAOuB,IAASvB,EAASC,MAG7BT,EAASgC,GAsC6FE,CAAW1B,EAASC,YAL1ED,EAASC,SAcvD,qBAAKS,UAAU,aAAf,SACI,wBAASS,QA3CH,WACb3B,EAAS,IACTF,EAAa,KAyCN,8BC9FAqC,MARf,WACE,OACE,qBAAKjB,UAAU,MAAf,SACE,cAAC,EAAD,OCKSkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1c7b0a4c.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport {BiPlusMedical  } from 'react-icons/bi';\r\nimport { MdDeleteForever } from 'react-icons/md';\r\nimport { BiCommentEdit } from 'react-icons/bi';\r\n\r\nconst Todo = () =>{\r\n    \r\n    const[inputData,setInputData] = useState('');\r\n    const[items, setItems] = useState([]);\r\n    const[toggleSubmit,setTogglesubmit] =useState(true);\r\n    const[isEditItems,setIsEditItem] = useState(null);\r\n    \r\n    const additems = () =>{\r\n        if(!inputData){\r\n            alert(\"PLEASE FILL YOUR BUCKET LIST !!!\");\r\n\r\n        } \r\n        else if(inputData && !toggleSubmit){\r\n            setItems(\r\n                items.reverse().map((elements)=>{\r\n                    if (elements.id===isEditItems){\r\n                        return {...elements,name:inputData}\r\n                    }\r\n                    return elements;\r\n                    \r\n                    \r\n                })   \r\n            )\r\n           \r\n            setTogglesubmit(true);\r\n            setInputData('');\r\n            setIsEditItem(null);\r\n            \r\n        }else{\r\n            const allInputData ={ id: new Date().getTime().toString(),name:inputData}\r\n            setItems([...items,allInputData]);\r\n            setInputData('')\r\n            console.log(inputData)\r\n        }\r\n        \r\n    }\r\n\r\n    const edititem = (id)=>{\r\n        let newEdititems = items.find((elements)=>{\r\n            return elements.id===id\r\n        });\r\n        console.log(newEdititems);\r\n        setTogglesubmit(false);\r\n        setInputData(newEdititems.name);\r\n        setIsEditItem(id);\r\n    }\r\n\r\n     const deleteitem =(index)=>{\r\n        //  console.log(id);\r\n         const updateItems = items.filter((elements) =>{\r\n             return index !==elements.id;\r\n\r\n         })\r\n         setItems(updateItems);\r\n     }\r\n     \r\n     \r\n\r\n    const removeAll =() =>{\r\n        setItems([]);\r\n        setInputData('');\r\n    }\r\n    return(\r\n        <div className=\"mainn\">\r\n            <div className = \"main \">\r\n                <div className =\"submain\"></div>\r\n                <figcaption className=\"captions\">WIRTE YOUR BUCKET LIST</figcaption>\r\n               \r\n\r\n             </div>\r\n            \r\n                <div className =\"Iput_items\">\r\n                <input type =\"text\" placeholder=\" Icehotel, Skydiving, Rafting  ....\" value={inputData} onChange={(e)=>setInputData (e.target.value)} />\r\n                {\r\n                    toggleSubmit ? <i><BiPlusMedical className=\"plus\" size =\"2em\" title=\"Add items\" onClick={additems}/> </i> :\r\n                    <BiCommentEdit  className=\"update\" size =\"2em\" title=\"Update Items\" onClick={additems} /> \r\n                    \r\n\r\n                }\r\n              \r\n             </div>\r\n\r\n                <div className =\"All-items\">\r\n                {\r\n                    items.map((elements) =>{\r\n                    return(\r\n                        <div className=\"each-items\" key={elements.id}>\r\n                            <h1>{elements.name}</h1> \r\n                            <div>\r\n                            \r\n                            <BiCommentEdit size=\"2em\" className=\"update\"   title=\"Update Items\" onClick={() =>edititem(elements.id)} /> \r\n                            <MdDeleteForever size=\"2em\"  className=\"delete\" title=\"Delete Items\" onClick={() =>deleteitem(elements.id)} /> \r\n                         </div>\r\n                        </div>\r\n                    )\r\n                    })\r\n                }\r\n\r\n               \r\n            </div>\r\n           <div className=\"all items \"> \r\n               <button  onClick={removeAll}> CLEAR ALL</button>\r\n           </div>\r\n    </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Todo;","\nimport './App.css';\nimport Todo from  \"./component/todo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}